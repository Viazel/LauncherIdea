<div id="launcher">
    <div id="launcher-option">
        <h1>LES LAUNCHERS</h1>
        <div class="box-social" id="hyranio-option">
            <div class="svg-social">
                <img src="../assets/icons/hyranio.png" alt="">
            </div>
            <div class="text-social">
                <h1>Hyranio</h1>
                <p>SMP 1.20</p>
            </div>
        </div>
        <div class="box-social" id="youtube-social">
            <div class="svg-social">
                <img src="../assets/icons/minecraft.png" alt="">
            </div>
            <div class="text-social">
                <h1>Minecraft</h1>
                <p>Dernière Version</p>
            </div>
        </div>
        <div class="box-social" id="youtube-social">
            <div class="svg-social">
                <img src="../assets/icons/minigames.png" alt="">
            </div>
            <div class="text-social">
                <h1>Mini-Games</h1>
                <p>Dernière Version</p>
            </div>
        </div>
    </div>
    <div id="player">
        <h1 id="player-name">YelloX605</h1>
        <img id="player-skin" alt="">
    </div>
    <div id="settings" class="box-social">
        <div class="svg-social">
            <img src="../assets/icons/settings.png" alt="">
        </div>
        <div class="text-social">
            <h1>Réglages</h1>
            <p>Settings</p>
        </div>
    </div>
</div>

<script>
    document.querySelectorAll("#launcher-option > .box-social").forEach(element => {
        element.onclick = async () => {
            launchGame()
        }
    })

    async function launchGame() {

        const { DistroAPI } = require("../assets/js/distromanager")

        const distro = await DistroAPI.refreshDistributionOrFallback()

        const { FullRepair, MojangIndexProcessor, DistributionIndexProcessor } = require('helios-core/dl')
        const ProcessBuilder = require("../assets/js/processbuilder")

        const remote = require("@electron/remote")

        const serverName = "Niderio-1.8.8"

        ConfigManager.setSelectedServer(serverName)
        ConfigManager.setModConfiguration(serverName, {
            id: serverName,
            mods: {}
        })
        ConfigManager.setMinRAM(serverName, "4G")
        ConfigManager.setMaxRAM(serverName, "10G")
        ConfigManager.setJavaExecutable(serverName, path.join("C:", "Program Files", "Java", fs.readdirSync("C:\\Program Files\\Java").filter(value => value.includes("1.8")).pop(), "bin", "javaw.exe"))
        ConfigManager.setJVMOptions(serverName, ["-Xmn128M"])
        ConfigManager.save()

        const serv = distro.getServerById(serverName)

        const fullRepairModule = new FullRepair(
            ConfigManager.getCommonDirectory(),
            ConfigManager.getInstanceDirectory(),
            ConfigManager.getLauncherDirectory(),
            ConfigManager.getSelectedServer(),
            DistroAPI.isDevMode()
        )

        fullRepairModule.spawnReceiver()

        let invalidFileCount = 0

        try {
            invalidFileCount = await fullRepairModule.verifyFiles(percent => {
                console.log(percent)
            })
        } catch (err) {
            console.log(err)
        }

        if(invalidFileCount > 0) {
            console.log("Mise a jour")
            try {
                await fullRepairModule.download(percent => {
                    console.log(percent)
                })
            } catch (err) {
                console.log(err)
            }
        }

        fullRepairModule.destroyReceiver()

        const mojang = new MojangIndexProcessor(
            ConfigManager.getCommonDirectory(),
            serv.rawServer.minecraftVersion
        )
        const distributionIndexProcessor = new DistributionIndexProcessor(
            ConfigManager.getCommonDirectory(),
            distro,
            serv.rawServer.id
        )

        const versionData = await mojang.getVersionJson()
        const versionForge = await distributionIndexProcessor.loadForgeVersionJson()

        let pb = new ProcessBuilder(serv, versionData, versionForge, ConfigManager.getSelectedAccount(), remote.app.getVersion())

        try {
            const proc = pb.build()

            proc.on("spawn", () => {
                ipc.send("winOpacity", "hide")
            })

            proc.on("close", () => {
                ipc.send("winOpacity", "show")
            })

            proc.stderr.on('data', event => {
                console.log(event)
            })

        } catch (err) {
            console.log(err)
        }
    }

</script>